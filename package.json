import express from "express";
import cors from "cors";
import { createClient } from "@supabase/supabase-js";

const app = express();
app.use(cors());
app.use(express.json());

// Env variables (set on Vercel)
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const ADMIN_TOKEN = process.env.ADMIN_TOKEN;

// Connect Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

// ===== Public API =====

// Get leaderboard (Top 10)
app.get("/leaderboard", async (req, res) => {
  const { data, error } = await supabase
    .from("scores")
    .select("name, score")
    .order("score", { ascending: false })
    .limit(10);

  if (error) return res.status(500).json({ error: error.message });
  res.json(data);
});

// Add/Update score
app.post("/leaderboard", async (req, res) => {
  const { name, score } = req.body;
  if (!name || score == null) {
    return res.status(400).json({ error: "Missing name or score" });
  }

  // Check existing score
  const { data: existing } = await supabase
    .from("scores")
    .select("id, score")
    .eq("name", name)
    .maybeSingle();

  if (existing && score <= existing.score) {
    return res.json({ message: "Score not higher, ignored." });
  }

  let result;
  if (existing) {
    result = await supabase
      .from("scores")
      .update({ score })
      .eq("id", existing.id)
      .select();
  } else {
    result = await supabase
      .from("scores")
      .insert([{ name, score }])
      .select();
  }

  if (result.error) return res.status(500).json({ error: result.error.message });
  res.json({ success: true, data: result.data });
});

// ===== Admin API =====

// Middleware check admin
function checkAdmin(req, res, next) {
  const token = req.headers["authorization"];
  if (token !== `Bearer ${ADMIN_TOKEN}`) {
    return res.status(403).json({ error: "Unauthorized" });
  }
  next();
}

// Admin login test
app.post("/admin/login", (req, res) => {
  const { token } = req.body;
  if (token === ADMIN_TOKEN) {
    return res.json({ success: true });
  }
  res.status(403).json({ error: "Invalid token" });
});

// Reset all scores
app.post("/admin/reset", checkAdmin, async (req, res) => {
  const { error } = await supabase.from("scores").delete().neq("id", 0);
  if (error) return res.status(500).json({ error: error.message });
  res.json({ success: true });
});

// Delete by name
app.post("/admin/delete", checkAdmin, async (req, res) => {
  const { name } = req.body;
  if (!name) return res.status(400).json({ error: "Name required" });
  const { error } = await supabase.from("scores").delete().eq("name", name);
  if (error) return res.status(500).json({ error: error.message });
  res.json({ success: true });
});

// Export CSV
app.get("/admin/export", checkAdmin, async (req, res) => {
  const { data, error } = await supabase.from("scores").select("id, name, score, created_at");